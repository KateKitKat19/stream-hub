{"version":3,"file":"static/js/751.d5fd893d.chunk.js","mappings":"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","sources":["components/ErrorNotification/ErrorNotification.jsx","components/GoogleAuth/GoogleAuth.jsx","helpers/yupValidation.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { Container, Heading, Stack, Text, Button } from '@chakra-ui/react';\n\nexport default function ErrorNotification({ errorMessage }) {\n  return (\n    <Container maxW={'5xl'}>\n      <Stack\n        textAlign={'center'}\n        align={'center'}\n        spacing={{ base: 8, md: 10 }}\n        py={{ base: 20, md: 28 }}\n      >\n        <Heading\n          fontWeight={600}\n          fontSize={{ base: '3xl', sm: '4xl', md: '6xl' }}\n          lineHeight={'110%'}\n        >\n          Ooops, something went wrong! <Text as={'span'}>{errorMessage}</Text>\n        </Heading>\n        <Stack spacing={6} direction={'row'}>\n          <Button\n            rounded={'full'}\n            px={6}\n            colorScheme={'orange'}\n            bg={'orange.400'}\n            _hover={{ bg: 'orange.500' }}\n            onClick={() => window.location.reload()}\n          >\n            Try again\n          </Button>\n        </Stack>\n      </Stack>\n    </Container>\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport { useDispatch } from 'react-redux';\nimport { register, logIn } from 'redux/auth/operations';\nimport { Button, Center } from '@chakra-ui/react';\nimport { FcGoogle } from 'react-icons/fc';\n\nexport const GoogleAuth = ({ type }) => {\n  const dispatch = useDispatch();\n  const signinButtonRef = useRef(null);\n\n  useEffect(() => {\n    function handleLoginSuccess(res) {\n      const userData = jwt_decode(res.credential);\n      if (type === 'register') {\n        dispatch(\n          register({\n            name: userData.name,\n            email: userData.email,\n            password: userData.sub,\n          })\n        );\n      } else if (type === 'login') {\n        dispatch(\n          logIn({\n            email: userData.email,\n            password: userData.sub,\n          })\n        );\n      }\n    }\n    /*global google*/\n    google.accounts.id.initialize({\n      client_id:\n        '678634402419-djp8c1atoej0ssbmb7sosa28mspt0kpt.apps.googleusercontent.com',\n      callback: handleLoginSuccess,\n    });\n\n    google.accounts.id.renderButton(signinButtonRef.current, {\n      theme: 'transparent',\n      size: 'large',\n      text: type === 'login' ? 'Sign in with Google' : 'Sign up with Google',\n    });\n  }, [dispatch, type]);\n\n  return (\n    <Center mt={6}>\n      <Button\n        ref={signinButtonRef}\n        variant=\"ghost\"\n        leftIcon={<FcGoogle />}\n        _hover={{ bg: 'transparent' }}\n      ></Button>\n    </Center>\n  );\n};\n","import * as Yup from 'yup';\n\nexport const validateRegistration = Yup.object({\n  firstName: Yup.string()\n    .min(3, 'Name should have at least 3 characters')\n    .required('Name is required!'),\n  lastName: Yup.string(),\n  email: Yup.string().email('Email is invalid!').required('Email is required!'),\n  password: Yup.string()\n    .min(5, 'Password must be minimum 5 digits!')\n    .required('Password is required!'),\n});\n\nexport const validateLogin = Yup.object({\n  email: Yup.string().email('Email is invalid!').required('Email is required!'),\n  password: Yup.string()\n    .min(5, 'Password must be minimum 5 digits!')\n    .required('Password is required!'),\n});\n\nexport const validateSubmission = Yup.object({\n  name: Yup.string()\n    .min(3, 'Name should have at least 3 characters')\n    .max(20, 'Name should be no more than 20 characters')\n    .required('Name is required!'),\n  description: Yup.string()\n    .min(3, 'Description must be minimum 3 digits!')\n    .max(500, 'Description should have at most 500 characters!')\n    .required('Description is required!'),\n  platform: Yup.string(),\n});\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Formik, Field, ErrorMessage } from 'formik';\n\nimport { validateRegistration } from 'helpers/yupValidation';\nimport { useState } from 'react';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Stack,\n  Button,\n  Heading,\n  Text,\n\n  Link,\n} from '@chakra-ui/react';\nimport { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\nimport { useNavigate } from 'react-router-dom';\nimport { GoogleAuth } from 'components/GoogleAuth/GoogleAuth';\n\nexport const RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const initialValues = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values, { setSubmitting }) => {\n\n    dispatch(\n      register({\n        name: values.firstName + ' ' + values.lastName,\n        email: values.email,\n        password: values.password,\n      })\n    )\n      .unwrap()\n      .then(setSubmitting(false));\n  };\n\n  return (\n    <Flex minH={'100vh'} align={'center'} justify={'center'}>\n      <Stack\n        spacing={8}\n        mx={'auto'}\n        maxW={'lg'}\n        py={12}\n        px={6}\n        align={'center'}\n      >\n        <Stack align={'center'}>\n          <Heading fontSize={'4xl'} textAlign={'center'}>\n            Sign up\n          </Heading>\n        </Stack>\n        <Box rounded={'lg'} bg={'white'} boxShadow={'lg'} p={8}>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={validateRegistration}\n            onSubmit={handleSubmit}\n          >\n            {({ handleSubmit, isSubmitting }) => (\n              <form onSubmit={handleSubmit}>\n                <Stack spacing={4}>\n                  <Stack direction={['column', 'row']} spacing={4}>\n                    <Box flex={1}>\n                      <FormControl id=\"firstName\" isRequired>\n                        <FormLabel>First Name</FormLabel>\n                        <Field name=\"firstName\" as={Input} type=\"text\" />\n                        <ErrorMessage\n                          name=\"firstName\"\n                          component={Text}\n                          color=\"red.500\"\n                        />\n                      </FormControl>\n                    </Box>\n                    <Box flex={1}>\n                      <FormControl id=\"lastName\">\n                        <FormLabel>Last Name</FormLabel>\n                        <Field name=\"lastName\" as={Input} type=\"text\" />\n                        <ErrorMessage\n                          name=\"lastName\"\n                          component={Text}\n                          color=\"red.500\"\n                        />\n                      </FormControl>\n                    </Box>\n                  </Stack>\n                  <FormControl id=\"email\" isRequired>\n                    <FormLabel>Email address</FormLabel>\n                    <Field name=\"email\" as={Input} type=\"email\" />\n                    <ErrorMessage\n                      name=\"email\"\n                      component={Text}\n                      color=\"red.500\"\n                    />\n                  </FormControl>\n                  <FormControl id=\"password\" isRequired>\n                    <FormLabel>Password</FormLabel>\n                    <InputGroup>\n                      <Field name=\"password\">\n                        {({ field }) => <Input {...field} type=\"password\" />}\n                      </Field>\n                      <InputRightElement h={'full'}>\n                        <Button\n                          variant={'ghost'}\n                          onClick={() =>\n                            setShowPassword(showPassword => !showPassword)\n                          }\n                        >\n                          {showPassword ? <ViewIcon /> : <ViewOffIcon />}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                    <ErrorMessage\n                      name=\"password\"\n                      component={Text}\n                      color=\"red.500\"\n                    />\n                  </FormControl>\n                  <Stack spacing={10} pt={2}>\n                    <Button\n                      type=\"submit\"\n                      isLoading={isSubmitting}\n                      loadingText=\"Submitting\"\n                      size=\"lg\"\n                      bg={'teal.400'}\n                      color={'white'}\n                      _hover={{\n                        bg: 'teal.500',\n                      }}\n                    >\n                      Sign up\n                    </Button>\n                  </Stack>\n                </Stack>\n              </form>\n            )}\n          </Formik>\n          <GoogleAuth type=\"register\" />\n          <Stack pt={6}>\n            <Text align={'center'}>\n              Already a user?{' '}\n              <Link color={'blue.500'} onClick={() => navigate('/login')}>\n                Login\n              </Link>\n            </Text>\n          </Stack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { selectLoginError, selectRefreshing } from 'redux/auth/selectors';\nimport { useSelector } from 'react-redux';\nimport ErrorNotification from 'components/ErrorNotification/ErrorNotification';\n\nexport default function Register() {\n  const refreshing = useSelector(selectRefreshing);\n  const error = useSelector(selectLoginError);\n\n  return (\n    <>\n      {!refreshing && error && <ErrorNotification errorMessage={error} />}\n      {!refreshing && !error && (\n        <>\n          <div>\n            <RegisterForm />\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["ErrorNotification","errorMessage","maxW","textAlign","align","spacing","base","md","py","fontWeight","fontSize","sm","lineHeight","as","direction","rounded","px","colorScheme","bg","_hover","onClick","window","location","reload","GoogleAuth","type","dispatch","useDispatch","signinButtonRef","useRef","useEffect","google","accounts","id","initialize","client_id","callback","res","userData","jwt_decode","credential","register","name","email","password","sub","logIn","renderButton","current","theme","size","text","mt","ref","variant","leftIcon","validateRegistration","Yup","firstName","min","required","lastName","validateLogin","validateSubmission","max","description","platform","RegisterForm","useState","showPassword","setShowPassword","navigate","useNavigate","minH","justify","mx","boxShadow","p","initialValues","validationSchema","onSubmit","values","setSubmitting","unwrap","then","handleSubmit","isSubmitting","flex","isRequired","Input","component","Text","color","field","I","h","pt","isLoading","loadingText","Register","refreshing","useSelector","selectRefreshing","error","selectLoginError"],"sourceRoot":""}