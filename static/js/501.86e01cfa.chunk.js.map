{"version":3,"file":"static/js/501.86e01cfa.chunk.js","mappings":"kMAKaA,EAAa,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrBC,GAAWC,EAAAA,EAAAA,MAmCjB,OAjCAC,EAAAA,EAAAA,YAAU,WAqBRC,OAAOC,SAASC,GAAGC,WAAW,CAC5BC,UACE,2EACFC,SAvBF,SAA4BC,GAC1B,IAAMC,GAAWC,EAAAA,EAAAA,GAAWF,EAAIG,YACnB,aAATb,EACFC,GACEa,EAAAA,EAAAA,IAAS,CACPC,KAAMJ,EAASI,KACfC,MAAOL,EAASK,MAChBC,SAAUN,EAASO,OAGL,UAATlB,GACTC,GACEkB,EAAAA,EAAAA,IAAM,CACJH,MAAOL,EAASK,MAChBC,SAAUN,EAASO,MAI1B,IAQDd,OAAOC,SAASC,GAAGc,aAAaC,SAASC,eAAe,gBAAiB,CACvEC,MAAO,UACPC,KAAM,SAET,GAAE,CAACvB,EAAUD,KAEP,gBAAKM,GAAG,gBAChB,C,4FCxCYmB,EAAuBC,EAAAA,GAAW,CAC7CX,KAAMW,EAAAA,KACHC,IAAI,EAAG,0CACPC,SAAS,qBACZZ,MAAOU,EAAAA,KAAaV,MAAM,qBAAqBY,SAAS,sBACxDX,SAAUS,EAAAA,KACPC,IAAI,EAAG,sCACPC,SAAS,2BAGDC,EAAgBH,EAAAA,GAAW,CACtCV,MAAOU,EAAAA,KAAaV,MAAM,qBAAqBY,SAAS,sBACxDX,SAAUS,EAAAA,KACPC,IAAI,EAAG,sCACPC,SAAS,0B,yHCXDE,EAAY,WACvB,IAAM7B,GAAWC,EAAAA,EAAAA,MAWX6B,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CAAEjB,MAAO,GAAIC,SAAU,IACtCiB,iBAAkBL,EAAAA,EAClBM,SAZmB,SAAAC,GACnBnC,GACEkB,EAAAA,EAAAA,IAAM,CACJH,MAAOoB,EAAOpB,MACdC,SAAUmB,EAAOnB,WAGtB,IAQD,OACE,kBAAMkB,SAAUJ,EAAOM,aAAcC,aAAa,MAAlD,WACE,kBACEhC,GAAG,QACHS,KAAK,QACLf,KAAK,QACLuC,SAAUR,EAAOS,aACjBC,MAAOV,EAAOK,OAAOpB,MACrB0B,YAAY,UAEbX,EAAOY,QAAQ3B,OAASe,EAAOa,OAAO5B,OACrC,yBAAMe,EAAOa,OAAO5B,QAClB,MACJ,kBACEV,GAAG,WACHN,KAAK,OACLe,KAAK,WACLwB,SAAUR,EAAOS,aACjBC,MAAOV,EAAOK,OAAOnB,SACrByB,YAAY,aAEbX,EAAOY,QAAQ1B,UAAYc,EAAOa,OAAO3B,UACxC,yBAAMc,EAAOa,OAAO3B,WAClB,MACJ,mBAAQjB,KAAK,SAAb,SAAsB,aAG3B,E,8BC5Cc,SAAS6C,IACtB,IAAMC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IACzBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAE1B,OACE,gCACGJ,IAAeG,IAAS,SAACE,EAAA,EAAD,KACvBL,IACA,iCACE,0BACE,SAAChB,EAAD,OAEF,SAAC/B,EAAA,EAAD,CAAYC,KAAK,cAGnB8C,GAAcG,IACd,2BAAK,iCAC0B,0BAAOA,SAK7C,C","sources":["components/GoogleAuth/GoogleAuth.jsx","helpers/yupValidation.js","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport { useDispatch } from 'react-redux';\nimport { register, logIn } from 'redux/auth/operations';\n\nexport const GoogleAuth = ({ type }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    function handleLoginSuccess(res) {\n      const userData = jwt_decode(res.credential);\n      if (type === 'register') {\n        dispatch(\n          register({\n            name: userData.name,\n            email: userData.email,\n            password: userData.sub,\n          })\n        );\n      } else if (type === 'login') {\n        dispatch(\n          logIn({\n            email: userData.email,\n            password: userData.sub,\n          })\n        );\n      }\n    }\n    /*global google*/\n    google.accounts.id.initialize({\n      client_id:\n        '678634402419-djp8c1atoej0ssbmb7sosa28mspt0kpt.apps.googleusercontent.com',\n      callback: handleLoginSuccess,\n    });\n\n    google.accounts.id.renderButton(document.getElementById('signinButton'), {\n      theme: 'outline',\n      size: 'large',\n    });\n  }, [dispatch, type]);\n\n  return <div id=\"signinButton\"></div>;\n};\n","import * as Yup from 'yup';\n\nexport const validateRegistration = Yup.object({\n  name: Yup.string()\n    .min(3, 'Name should have at least 3 characters')\n    .required('Name is required!'),\n  email: Yup.string().email('Email is invalid!').required('Email is required!'),\n  password: Yup.string()\n    .min(5, 'Password must be minimum 5 digits!')\n    .required('Password is required!'),\n});\n\nexport const validateLogin = Yup.object({\n  email: Yup.string().email('Email is invalid!').required('Email is required!'),\n  password: Yup.string()\n    .min(5, 'Password must be minimum 5 digits!')\n    .required('Password is required!'),\n});\n","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { validateLogin } from 'helpers/yupValidation';\nimport { useFormik } from 'formik';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = values => {\n    dispatch(\n      logIn({\n        email: values.email,\n        password: values.password,\n      })\n    );\n  };\n\n  const formik = useFormik({\n    initialValues: { email: '', password: '' },\n    validationSchema: validateLogin,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit} autoComplete=\"off\">\n      <input\n        id=\"email\"\n        name=\"email\"\n        type=\"email\"\n        onChange={formik.handleChange}\n        value={formik.values.email}\n        placeholder=\"Email\"\n      />\n      {formik.touched.email && formik.errors.email ? (\n        <div>{formik.errors.email}</div>\n      ) : null}\n      <input\n        id=\"password\"\n        type=\"text\"\n        name=\"password\"\n        onChange={formik.handleChange}\n        value={formik.values.password}\n        placeholder=\"Password\"\n      />\n      {formik.touched.password && formik.errors.password ? (\n        <div>{formik.errors.password}</div>\n      ) : null}\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { GoogleAuth } from 'components/GoogleAuth/GoogleAuth';\nimport { Loader } from 'components/Loader/Loader';\nimport { selectLoginError, selectRefreshing } from 'redux/auth/selectors';\nimport { useSelector } from 'react-redux';\n\nexport default function Login() {\n  const refreshing = useSelector(selectRefreshing);\n  const error = useSelector(selectLoginError);\n\n  return (\n    <>\n      {refreshing && !error && <Loader></Loader>}\n      {!refreshing && (\n        <>\n          <div>\n            <LoginForm />\n          </div>\n          <GoogleAuth type=\"login\"></GoogleAuth>\n        </>\n      )}\n      {!refreshing && error && (\n        <div>\n          Ooops, something went wrong! <span>{error}</span>\n        </div>\n      )}\n    </>\n  );\n}\n"],"names":["GoogleAuth","type","dispatch","useDispatch","useEffect","google","accounts","id","initialize","client_id","callback","res","userData","jwt_decode","credential","register","name","email","password","sub","logIn","renderButton","document","getElementById","theme","size","validateRegistration","Yup","min","required","validateLogin","LoginForm","formik","useFormik","initialValues","validationSchema","onSubmit","values","handleSubmit","autoComplete","onChange","handleChange","value","placeholder","touched","errors","Login","refreshing","useSelector","selectRefreshing","error","selectLoginError","Loader"],"sourceRoot":""}