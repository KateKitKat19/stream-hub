{"version":3,"file":"static/js/751.261032fc.chunk.js","mappings":"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","sources":["components/ErrorNotification/ErrorNotification.jsx","components/GoogleAuth/GoogleAuth.jsx","helpers/yupValidation.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { Container, Heading, Stack, Text, Button } from '@chakra-ui/react';\n\nexport default function ErrorNotification({ errorMessage }) {\n  return (\n    <Container maxW={'5xl'}>\n      <Stack\n        textAlign={'center'}\n        align={'center'}\n        spacing={{ base: 8, md: 10 }}\n        py={{ base: 20, md: 28 }}\n      >\n        <Heading\n          fontWeight={600}\n          fontSize={{ base: '3xl', sm: '4xl', md: '6xl' }}\n          lineHeight={'110%'}\n        >\n          Ooops, something went wrong! <Text as={'span'}>{errorMessage}</Text>\n        </Heading>\n        <Stack spacing={6} direction={'row'}>\n          <Button\n            rounded={'full'}\n            px={6}\n            colorScheme={'orange'}\n            bg={'orange.400'}\n            _hover={{ bg: 'orange.500' }}\n            onClick={() => window.location.reload()}\n          >\n            Try again\n          </Button>\n        </Stack>\n      </Stack>\n    </Container>\n  );\n}\n","import { Button, Center, Link } from '@chakra-ui/react';\nimport { FcGoogle } from 'react-icons/fc';\n\nexport const GoogleAuth = ({ type }) => {\n  return (\n    <Center mt={6}>\n      <Button\n        as={Link}\n        display={'flex'}\n        justifyItems={'center'}\n        alignItems={'center'}\n        leftIcon={<FcGoogle />}\n        _hover={{\n          textDecoration:\"none\",\n          shadow: 'md',\n          transitionDuration: '250ms',\n          transitionTimingFunction: 'ease-in-out',\n        }}\n        variant={'outline'}\n        size=\"lg\"\n      >\n        {type === 'login' ? 'Sign in with Google' : 'Sign up with Google'}\n      </Button>\n    </Center>\n  );\n};\n","import * as Yup from 'yup';\n\nexport const validateRegistration = Yup.object({\n  firstName: Yup.string()\n    .min(3, 'Name should have at least 3 characters')\n    .required('Name is required!'),\n  lastName: Yup.string(),\n  email: Yup.string().email('Email is invalid!').required('Email is required!'),\n  password: Yup.string()\n    .min(5, 'Password must be minimum 5 digits!')\n    .required('Password is required!'),\n});\n\nexport const validateLogin = Yup.object({\n  email: Yup.string().email('Email is invalid!').required('Email is required!'),\n  password: Yup.string()\n    .min(5, 'Password must be minimum 5 digits!')\n    .required('Password is required!'),\n});\n\nexport const validateSubmission = Yup.object({\n  name: Yup.string()\n    .min(3, 'Name should have at least 3 characters')\n    .max(20, 'Name should be no more than 20 characters')\n    .required('Name is required!'),\n  description: Yup.string()\n    .min(3, 'Description must be minimum 3 digits!')\n    .max(500, 'Description should have at most 500 characters!')\n    .required('Description is required!'),\n  platform: Yup.string(),\n});\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Formik, Field, ErrorMessage } from 'formik';\n\nimport { validateRegistration } from 'helpers/yupValidation';\nimport { useState } from 'react';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Stack,\n  Button,\n  Heading,\n  Text,\n\n  Link,\n} from '@chakra-ui/react';\nimport { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\nimport { useNavigate } from 'react-router-dom';\nimport { GoogleAuth } from 'components/GoogleAuth/GoogleAuth';\n\nexport const RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const initialValues = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values, { setSubmitting }) => {\n\n    dispatch(\n      register({\n        name: values.firstName + ' ' + values.lastName,\n        email: values.email,\n        password: values.password,\n      })\n    )\n      .unwrap()\n      .then(setSubmitting(false));\n  };\n\n  return (\n    <Flex minH={'100vh'} align={'center'} justify={'center'}>\n      <Stack\n        spacing={8}\n        mx={'auto'}\n        maxW={'lg'}\n        py={12}\n        px={6}\n        align={'center'}\n      >\n        <Stack align={'center'}>\n          <Heading fontSize={'4xl'} textAlign={'center'}>\n            Sign up\n          </Heading>\n        </Stack>\n        <Box rounded={'lg'} bg={'white'} boxShadow={'lg'} p={8}>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={validateRegistration}\n            onSubmit={handleSubmit}\n          >\n            {({ handleSubmit, isSubmitting }) => (\n              <form onSubmit={handleSubmit}>\n                <Stack spacing={4}>\n                  <Stack direction={['column', 'row']} spacing={4}>\n                    <Box flex={1}>\n                      <FormControl id=\"firstName\" isRequired>\n                        <FormLabel>First Name</FormLabel>\n                        <Field name=\"firstName\" as={Input} type=\"text\" />\n                        <ErrorMessage\n                          name=\"firstName\"\n                          component={Text}\n                          color=\"red.500\"\n                        />\n                      </FormControl>\n                    </Box>\n                    <Box flex={1}>\n                      <FormControl id=\"lastName\">\n                        <FormLabel>Last Name</FormLabel>\n                        <Field name=\"lastName\" as={Input} type=\"text\" />\n                        <ErrorMessage\n                          name=\"lastName\"\n                          component={Text}\n                          color=\"red.500\"\n                        />\n                      </FormControl>\n                    </Box>\n                  </Stack>\n                  <FormControl id=\"email\" isRequired>\n                    <FormLabel>Email address</FormLabel>\n                    <Field name=\"email\" as={Input} type=\"email\" />\n                    <ErrorMessage\n                      name=\"email\"\n                      component={Text}\n                      color=\"red.500\"\n                    />\n                  </FormControl>\n                  <FormControl id=\"password\" isRequired>\n                    <FormLabel>Password</FormLabel>\n                    <InputGroup>\n                      <Field name=\"password\">\n                        {({ field }) => <Input {...field} type=\"password\" />}\n                      </Field>\n                      <InputRightElement h={'full'}>\n                        <Button\n                          variant={'ghost'}\n                          onClick={() =>\n                            setShowPassword(showPassword => !showPassword)\n                          }\n                        >\n                          {showPassword ? <ViewIcon /> : <ViewOffIcon />}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                    <ErrorMessage\n                      name=\"password\"\n                      component={Text}\n                      color=\"red.500\"\n                    />\n                  </FormControl>\n                  <Stack spacing={10} pt={2}>\n                    <Button\n                      type=\"submit\"\n                      isLoading={isSubmitting}\n                      loadingText=\"Submitting\"\n                      size=\"lg\"\n                      bg={'teal.400'}\n                      color={'white'}\n                      _hover={{\n                        bg: 'teal.500',\n                      }}\n                    >\n                      Sign up\n                    </Button>\n                  </Stack>\n                </Stack>\n              </form>\n            )}\n          </Formik>\n          <GoogleAuth type=\"register\" />\n          <Stack pt={6}>\n            <Text align={'center'}>\n              Already a user?{' '}\n              <Link color={'blue.500'} onClick={() => navigate('/login')}>\n                Login\n              </Link>\n            </Text>\n          </Stack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { selectLoginError, selectRefreshing } from 'redux/auth/selectors';\nimport { useSelector } from 'react-redux';\nimport ErrorNotification from 'components/ErrorNotification/ErrorNotification';\n\nexport default function Register() {\n  const refreshing = useSelector(selectRefreshing);\n  const error = useSelector(selectLoginError);\n\n  return (\n    <>\n      {!refreshing && error && <ErrorNotification errorMessage={error} />}\n      {!refreshing && !error && (\n        <>\n          <div>\n            <RegisterForm />\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["ErrorNotification","errorMessage","maxW","textAlign","align","spacing","base","md","py","fontWeight","fontSize","sm","lineHeight","as","direction","rounded","px","colorScheme","bg","_hover","onClick","window","location","reload","GoogleAuth","type","mt","Link","display","justifyItems","alignItems","leftIcon","textDecoration","shadow","transitionDuration","transitionTimingFunction","variant","size","validateRegistration","Yup","firstName","min","required","lastName","email","password","validateLogin","validateSubmission","name","max","description","platform","RegisterForm","useState","showPassword","setShowPassword","dispatch","useDispatch","navigate","useNavigate","minH","justify","mx","boxShadow","p","initialValues","validationSchema","onSubmit","values","setSubmitting","register","unwrap","then","handleSubmit","isSubmitting","flex","id","isRequired","Input","component","Text","color","field","I","h","pt","isLoading","loadingText","Register","refreshing","useSelector","selectRefreshing","error","selectLoginError"],"sourceRoot":""}