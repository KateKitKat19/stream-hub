{"version":3,"file":"static/js/751.38a226b3.chunk.js","mappings":"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","sources":["../node_modules/jwt-decode/lib/atob.js","components/GoogleAuth/GoogleAuth.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction InvalidCharacterError(message) {\n    this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = \"InvalidCharacterError\";\n\nfunction polyfill(input) {\n    var str = String(input).replace(/=+$/, \"\");\n    if (str.length % 4 == 1) {\n        throw new InvalidCharacterError(\n            \"'atob' failed: The string to be decoded is not correctly encoded.\"\n        );\n    }\n    for (\n        // initialize result and counters\n        var bc = 0, bs, buffer, idx = 0, output = \"\";\n        // get next character\n        (buffer = str.charAt(idx++));\n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer &&\n        ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ?\n        (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n        0\n    ) {\n        // try to find character in table (0-63, not found => -1)\n        buffer = chars.indexOf(buffer);\n    }\n    return output;\n}\n\nexport default (typeof window !== \"undefined\" &&\n    window.atob &&\n    window.atob.bind(window)) ||\npolyfill;","import { useEffect } from 'react';\nimport jwt_decode from 'jwt-decode';\n\nexport const GoogleAuth = () => {\n  function handleLoginSuccess(res) {\n    console.log('credential in response: ', res);\n    const userData = jwt_decode(res.credential);\n    console.log('userData: ', userData);\n  }\n  useEffect(() => {\n    /*global google*/\n    google.accounts.id.initialize({\n      client_id:\n        '678634402419-djp8c1atoej0ssbmb7sosa28mspt0kpt.apps.googleusercontent.com',\n      callback: handleLoginSuccess,\n    });\n\n    google.accounts.id.renderButton(document.getElementById('signinButton'), {\n      theme: 'outline',\n      size: 'large',\n    });\n  }, []);\n\n  return <div id=\"signinButton\"></div>;\n};\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          Username\n          <input type=\"text\" name=\"name\" />\n        </label>\n        <label>\n          Email\n          <input type=\"email\" name=\"email\" />\n        </label>\n        <label>\n          Password\n          <input type=\"password\" name=\"password\" />\n        </label>\n        <button type=\"submit\">Register</button>\n      </form>\n    </>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { GoogleAuth } from 'components/GoogleAuth/GoogleAuth';\nexport default function Register() {\n  return (\n    <>\n      <div>\n        <RegisterForm />\n      </div>\n      <GoogleAuth></GoogleAuth>\n    </>\n  );\n}\n"],"names":["InvalidCharacterError","message","this","prototype","Error","name","window","atob","bind","input","str","String","replace","length","bs","buffer","bc","idx","output","charAt","fromCharCode","indexOf","decodeURIComponent","m","p","code","charCodeAt","toString","toUpperCase","GoogleAuth","handleLoginSuccess","res","console","log","userData","jwt_decode","credential","useEffect","google","accounts","id","initialize","client_id","callback","renderButton","document","getElementById","theme","size","RegisterForm","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","register","elements","value","email","password","reset","autoComplete","type","Register"],"sourceRoot":""}